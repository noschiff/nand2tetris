// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    // i means opcode; 0 = A-instruction, 1 = C-instruction

    //if opcode = 0, instruction is for A
    //if opcode = 1, instruction is for C
    Not(in=instruction[15], out=Ainstruction);

    Mux16(a=alu, b=instruction, sel=Ainstruction, out=muxToA);

    //load A if: A instruction (notOp == 1) OR C instruction with A destination
    //dest A: d1=1, d2 and d3 can be either 1 or 0; instruction[5]
    Or(a=Ainstruction, b=instruction[5], out=loadA);

    //memory takes address[15] so only send [0..14]
    ARegister(in=muxToA, load=loadA, out=Aregister, out[0..14]=addressM);

    //dest D: d2=1 and opcode = 1 (only load if C-instruction)
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=alu, load=loadD, out=Dregister);

    //dest M: d3=1 and opcode = 1 (only write if C-instruction)
    And(a=instruction[3], b=instruction[15], out=writeM);

    //a bit: instruction[12]
    //a==0: comp with A, a==1: comp with M
    //'c' bits have different meanings determined by 'a' bit
    Mux16(a=Aregister, b=inM, sel=instruction[12], out=AmuxM);

    ALU(x=Dregister, y=AmuxM,
      //instruction[6..11] are ALU control bits
      zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
      out=alu, out=outM, //ALU output sent to: D-register, A-register, data memory (outM)
      zr=zr, ng=ng); //output control bits

    //Program Counter:
    //000: no jump; PC++
    //111: unconditional jump; go to A
    //else: conditional; jump if true

    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);

    //if j2=1, test for equal to 0
    And(a=zr, b=instruction[1], out=JEQ);
    //if j1=1, test for negative
    And(a=ng, b=instruction[2], out=JL);
    //if j3=1, test for positive (but not equal to 0)
    And(a=notng, b=notzr, out=positiveNot0);
    And(a=positiveNot0, b=instruction[0], out=JG);

    //combine 3 cases
    Or(a=JEQ, b=JL, out=leql);
    Or(a=leql, b=JG, out=jump);

    //only jump/load if C-instruction; opcode=1
    And(a=jump, b=instruction[15], out=PCload);

    //note: PC checks load[t] == 1 before inc[t] == 1 so it will never inc if loaded
    //therefore, inc can always be true bc in CPU we don't want out[t+1] = out[t]
    PC(in=Aregister, load=PCload, inc=true, reset=reset, out[0..14]=pc);
}
